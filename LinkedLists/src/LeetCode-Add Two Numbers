/**
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null && l2 != null) {
            return l2;
        }
        if (l1 != null && l2 == null) {
            return l1;
        }
        if (l1 == null && l2 == null) {
            return null;
        }
        int sum = l1.val + l2.val;
        ListNode head = new ListNode(sum % 10);
        int carry = sum / 10;
        l1 = l1.next;
        l2 = l2.next;
        ListNode result = head;
        while(l1 != null || l2 != null) {
            int tempSum = carry;
            if (l1 != null) {
                tempSum += l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                tempSum += l2.val;
                l2 = l2.next;
            }
            result.next = new ListNode(tempSum % 10);
            carry = tempSum / 10;
            result = result.next;
        }
        if (carry > 0) {
            result.next = new ListNode(carry);
        }
        return head;
    }
}
